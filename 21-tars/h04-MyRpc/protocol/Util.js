// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "Util.tars" by Server Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var Util = Util || {};
module.exports.Util = Util;

Util.CalculateImp = function () { 
    this._name   = undefined;
    this._worker = undefined;
};

Util.CalculateImp.prototype.initialize = function () {};

Util.CalculateImp.prototype.onDispatch = function (current, funcName, binBuffer) { 
    if ("__" + funcName in this) {
        return this["__" + funcName](current, binBuffer);
    } else {
        return TarsError.SERVER.FUNC_NOT_FOUND;
    }
};

var __Util_Calculate$tars_ping$RE = function (_ret) {
    if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = this.getRequestVersion();
        tup.writeInt32("", _ret);

        this.doResponse(tup.encode());
    } else {
        var os = new TarsStream.TarsOutputStream();
        os.writeInt32(0, _ret);

        this.doResponse(os.getBinBuffer());
    }
};

Util.CalculateImp.prototype.__tars_ping = function (current) {
    __Util_Calculate$tars_ping$RE.call(current, 0);

    return TarsError.SUCCESS;
};

Util.CalculateImp.prototype.add = function () {
    assert.fail("add function not implemented");
};

var __Util_Calculate$add$RE = function (_ret, c) {
    if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = this.getRequestVersion();
        tup.writeInt32("", _ret);
        tup.writeInt32("c", c);

        this.doResponse(tup.encode());
    } else if (this.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = {};
        _data_["tars_ret"] = _ret;
        _data_["c"] = c.toObject ? c.toObject() : c;

         this.doResponse(new TarsStream.BinBuffer(Buffer.from(JSON.stringify(_data_))));
    } else {
        var os = new TarsStream.TarsOutputStream();
        os.writeInt32(0, _ret);
        os.writeInt32(3, c);

        this.doResponse(os.getBinBuffer());
    }
};

Util.CalculateImp.prototype.__add = function (current, binBuffer) {
    var a = null;
    var b = null;
    var c = null;

    if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = current.getRequestVersion();
        tup.decode(binBuffer);
        a = tup.readInt32("a");
        b = tup.readInt32("b");
        c = tup.readInt32("c", 0);
    } else if (current.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = JSON.parse(binBuffer.toNodeBuffer());
        a = _data_.a;
        b = _data_.b;
        c = _data_.c || 0;
    } else {
        var is = new TarsStream.TarsInputStream(binBuffer);
        a = is.readInt32(1, true, 0);
        b = is.readInt32(2, true, 0);
        c = is.readInt32(3, false, 0);
    }

    current.sendResponse = __Util_Calculate$add$RE;

    this.add(current, a, b, c);

    return TarsError.SUCCESS;
};

Util.CalculateImp.prototype.sub = function () {
    assert.fail("sub function not implemented");
};

var __Util_Calculate$sub$RE = function (_ret, c) {
    if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = this.getRequestVersion();
        tup.writeInt32("", _ret);
        tup.writeInt32("c", c);

        this.doResponse(tup.encode());
    } else if (this.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = {};
        _data_["tars_ret"] = _ret;
        _data_["c"] = c.toObject ? c.toObject() : c;

         this.doResponse(new TarsStream.BinBuffer(Buffer.from(JSON.stringify(_data_))));
    } else {
        var os = new TarsStream.TarsOutputStream();
        os.writeInt32(0, _ret);
        os.writeInt32(3, c);

        this.doResponse(os.getBinBuffer());
    }
};

Util.CalculateImp.prototype.__sub = function (current, binBuffer) {
    var a = null;
    var b = null;
    var c = null;

    if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = current.getRequestVersion();
        tup.decode(binBuffer);
        a = tup.readInt32("a");
        b = tup.readInt32("b");
        c = tup.readInt32("c", 0);
    } else if (current.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = JSON.parse(binBuffer.toNodeBuffer());
        a = _data_.a;
        b = _data_.b;
        c = _data_.c || 0;
    } else {
        var is = new TarsStream.TarsInputStream(binBuffer);
        a = is.readInt32(1, true, 0);
        b = is.readInt32(2, true, 0);
        c = is.readInt32(3, false, 0);
    }

    current.sendResponse = __Util_Calculate$sub$RE;

    this.sub(current, a, b, c);

    return TarsError.SUCCESS;
};





